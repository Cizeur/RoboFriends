{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","console","log","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sOAeeA,G,MAbF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,EAA1B,cACzB,6BACC,4BAAKF,GACL,2BAAIC,OCWOK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OAAS,kBAAC,EAAD,CACPC,IAAKD,EACLR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,aCGZW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAU,OACf,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,eACZC,SAAUH,MCAEI,EAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,mBAAoBC,OAAQ,UACnEJ,EAAMK,WCoBKC,E,kDApBd,WAAYN,GAAQ,IAAD,8BACnB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHQ,E,8DAOAC,EAAOC,GACzBC,KAAKC,SAAS,CAACJ,UAAU,IACzBK,QAAQC,IAAR,wBAA6BL,EAA7B,8BAAwDC,M,+BAIxD,OAAIC,KAAKJ,MAAMC,SACP,gEAEDG,KAAKX,MAAMK,a,GAjBOU,aC+CZC,E,kDA1Cb,aAAc,IAAD,8BACX,gBAaFC,eAAiB,SAACC,GACd,EAAKN,SAAS,CAAClB,YAAawB,EAAMC,OAAOC,SAb3C,EAAKb,MAAQ,CACXnB,OAAQ,GACRM,YAAa,IAJJ,E,gEAQQ,IAAD,OAClB2B,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACxB,OAAQqC,S,+BAQlC,IAAD,EACwBd,KAAKJ,MAA5BnB,EADD,EACCA,OAAQM,EADT,EACSA,YACTgC,EAAiBtC,EAAOuC,QAAO,SAAAC,GACnC,OACEA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,gBAC3CD,EAAM9C,MAAM+C,cAAcC,SAASpC,EAAYmC,kBAGtD,OAASzC,EAAO2C,OAEd,yBAAK/C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKM,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU7B,OAAQsC,OAPA,wBAAI1C,UAAU,SAAd,e,GA7BZ+B,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLI,QAAQJ,MAAMA,EAAMuC,a","file":"static/js/main.e5154a5f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id }) => {\n\treturn (\n\t\t//light green background | inline-block | border 3 | padding 3 | margin 3 | grow on hover | border width 2 and shadow 5\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot card' src={`https://robohash.org/${id}?200x200`}></img>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card\n","import React from 'react';\nimport Card from './Card.js'\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\trobots.map((user, index) => {\n\t\t\t\treturn ( <Card\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tid={robots[index].id}\n\t\t\t\t\t\tname={robots[index].name}\n\t\t\t\t\t\temail={robots[index].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\nexport default CardList\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t<input\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search'\n\t\t\tplaceholder='Search Robot'\n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border:'1 px solid black', height: \"500px\"}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\nexport default Scroll\n","import React, { Component } from 'react';\n\n//Only from react 16\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\tsuper(props);\n\tthis.state = {\n\t\thasError: false,\n\t\t}\n\t}\n\n\tcomponentDidCatch (error, info) {\n\t\tthis.setState({hasError: true});\n\t\tconsole.log(`the error is :${error} and further info: ${info}`);\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooooops. That failed miserably.</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundry from '../components/ErrorBoundry.js'\n\nclass App extends Component{\n  // constructor\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      searchfield: '',\n    }\n  }\n  //\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then (users => this.setState({robots: users}))\n  }\n  // function called on search change\n  onSearchChange = (event) => {\n      this.setState({searchfield: event.target.value});\n  }\n\n  // render\n  render(){\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return (\n        robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        || robot.email.toLowerCase().includes(searchfield.toLowerCase())\n        )\n    });\n    return (!robots.length) ? <h1 className=\"tc f1\">Loading</h1> :\n      (\n      <div className='tc'>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}