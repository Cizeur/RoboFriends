{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","console","log","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobot","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c6c076e5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    //light green background | inline-block | border 3 | padding 3 | margin 3 | grow on hover | border width 2 and shadow 5\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        alt=\"robot card\"\n        src={`https://robohash.org/${id}?size=200x200`}\n      ></img>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card.js\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, index) => {\n        return (\n          <Card\n            key={index}\n            id={robots[index].id}\n            name={robots[index].name}\n            email={robots[index].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robot\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"1 px solid black\",\n        height: \"500px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\nexport default Scroll;\n","import React, { Component } from \"react\";\n\n//Only from react 16\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n    console.log(`the error is :${error} and further info: ${info}`);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooooops. That failed miserably.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList.js\";\nimport SearchBox from \"../components/SearchBox.js\";\nimport Scroll from \"../components/Scroll.js\";\nimport ErrorBoundry from \"../components/ErrorBoundry.js\";\n\nimport { setSearchField, requestRobots } from \"../action.js\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  // render\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return (\n        robot.name.toLowerCase().includes(searchField.toLowerCase()) ||\n        robot.email.toLowerCase().includes(searchField.toLowerCase())\n      );\n    });\n    return isPending ? (\n      <h1 className=\"tc f1\">Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\n// REQUEST WITH 3 STATES\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    //return Object.assign({}, state, {searchField: action.payload});\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobot = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobot, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}